name: .NET Core

on:
  [push]

env:
  MSSQL_SA_PASSWORD: "YourStrong!Passw0rd"
  ACCEPT_EULA: "Y"
  MSSQL_PID: "developer"
  
jobs:  
  build:

    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: pgpass4291
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Disable disk flushing on CI
      run: sudo apt-get install -y libeatmydata1
    - uses: actions/checkout@v3
    - uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x'
    - uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: '11'
        cache: 'maven'
    - name: Start MySQL
      run: |
        sed -i'' -e 's/Password=;/Password=pgpass4291;/' Tests/IsIdentifiableTests/TestDatabases.xml
        sed -i'' -e 's/Uid=root;Pwd=;/Uid=root;Pwd=root;AllowPublicKeyRetrieval=True;/' Tests/IsIdentifiableTests/TestDatabases.xml
        sudo mkdir -p /var/run/mysqld
        sudo chown mysql:mysql /var/run/mysqld
        sudo mysqld_safe --port=3306 &
    - name: Install MS SQL Server
      run: |
        wget -qO- https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        sudo add-apt-repository "$(wget -qO- https://packages.microsoft.com/config/ubuntu/18.04/mssql-server-2019.list)"
        sudo apt-get install -y --no-install-recommends postgresql mssql-tools mssql-server
        sudo -E /opt/mssql/bin/mssql-conf -n setup accept-eula
    - name: Fetch tessdata
      run: |
        bash data/tessdata/download.sh
        mv eng.traineddata ./data/tessdata/eng.traineddata
    - name: Build
      run: dotnet build --configuration Release --nologo
    - name: Test
      run: dotnet test --blame -l:"console;verbosity=normal" --no-restore --nologo
    - name: Build Java NERD
      run: |
        cd nlp/uk.ac.dundee.hic.nerd
        mvn -B -q clean compile assembly:single
        java -jar target/nerd-0.0.1-SNAPSHOT.jar &
        timeout 30 sh -c 'until nc -z 127.0.0.1 1881; do sleep 1; done'
        printf "University of Dundee\0Fred Bloggs\0Ninewells Hospital\0person\0woman\0man\0camera\0tv\0" | nc -N 127.0.0.1 1881
        kill $!
        mkdir -p ../../release
        PREV=`pwd`
        mkdir -p /tmp/ikvm
        cd /tmp/ikvm
        wget -q https://github.com/ikvm-revived/ikvm/releases/download/8.2.1/IKVM-8.2.1-tools-ikvmc-netcoreapp3.1.zip
        unzip -q IKVM-8.2.1-tools-ikvmc-netcoreapp3.1.zip
        rm IKVM-8.2.1-tools-ikvmc-netcoreapp3.1.zip
        cd linux-x64
        wget -q https://github.com/ikvm-revived/ikvm/releases/download/8.2.1/IKVM-8.2.1-bin-netcoreapp3.1.zip
        unzip -q IKVM-8.2.1-bin-netcoreapp3.1.zip
        rm IKVM-8.2.1-bin-netcoreapp3.1.zip
        dotnet ikvm.dll -out:$PREV/nerdjar.dll -target:library $PREV/target/nerd-0.0.1-SNAPSHOT.jar -nostdlib -r:refs/*.dll
        cd $PREV
        dotnet publish -r linux-x64 -o linux --nologo --sc -p:PublishSingleFile=true
        mv target/nerd-0.0.1-SNAPSHOT.jar ../../release/smi-nerd-$(fgrep AssemblyVersion ../../SharedAssemblyInfo.cs | cut -d'"' -f2).jar
    - name: Package ii binary
      run: |
        cd ii
        dotnet publish --runtime win-x64 -c Release --self-contained true -o ../ii-win-x64
        dotnet publish --runtime linux-x64 -c Release --self-contained true -o ../ii-$(fgrep AssemblyVersion ../SharedAssemblyInfo.cs|cut -d'"' -f2)-cli-linux-x64
        cd ../ii-win-x64
        zip -q9r ../release/ii-$(fgrep AssemblyVersion ../SharedAssemblyInfo.cs|cut -d'"' -f2)-cli-win-x64.zip .
        cd ..
        tar -zcvf ./release/ii-$(fgrep AssemblyVersion SharedAssemblyInfo.cs|cut -d'"' -f2)-cli-linux-x64.tar.gz ii-$(fgrep AssemblyVersion SharedAssemblyInfo.cs|cut -d'"' -f2)-cli-linux-x64
    - name: Test ii binary
      run: |
         set -e
         mkdir ./testii
         cd ./testii
         tar -xzf ../release/ii-*-cli-linux-x64.tar.gz
         ./ii-*-cli-linux-x64/ii --help
         cd ..

         wget -qO- https://github.com/HicServices/BadMedicine.Dicom/releases/download/v0.0.14/baddicom-linux-x64-v0.0.14.tar.gz | tar -xzf -
         ./linux-x64/BadDicom -s 100 ./testdicoms/ 10 10 CT                  
         ./testii/ii-*-cli-linux-x64/ii dir -d ./testdicoms --tessdirectory ./data/tessdata/ --storereport 

    - name: Pack
      run: dotnet pack IsIdentifiable/IsIdentifiable.csproj -c Release -p:PackageVersion=$(fgrep AssemblyVersion SharedAssemblyInfo.cs|cut -d'"' -f2) --nologo --include-source -o .
    - name: Package RDMP Plugin
      run: |
        cd IsIdentifiablePlugin
        dotnet publish --self-contained false
        nuget pack ./IsIdentifiablePlugin.nuspec -Properties Configuration=Debug -IncludeReferencedProjects -Symbols -Version $(grep AssemblyInformationalVersion ../SharedAssemblyInfo.cs | cut -d'"' -f2)
        mv ./IsIdentifiablePlugin.*.nupkg ../release/
        cd ..
    - name: Nuget push
      if: contains(github.ref,'refs/tags/')
      run: dotnet nuget push IsIdentifiable.*.nupkg -s https://api.nuget.org/v3/index.json -k ${{ secrets.NUGET_KEY }} --skip-duplicate
    - name: Store created nupkg files
      uses: actions/upload-artifact@v3
      with:
        path: release/IsIdentifiablePlugin.*.nupkg
        retention-days: 1
    - name: Upload binaries to release
      uses: svenstaro/upload-release-action@2.3.0
      if: contains(github.ref, 'refs/tags/v')
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: release/*
        tag: ${{ github.ref }}
        overwrite: true
        file_glob: true
